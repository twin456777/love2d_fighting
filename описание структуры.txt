Вот примерное описание структуры движка. Я помечу словом СИСТЕМНАЯ папки и файлы, которые будут забиты в движок по умолчанию и без которых он не будет работать, а слово МОДУЛЬНАЯ папки и файлы, которые можно удалять, переименовывать или изменять. Пути до файлов, содержащихся в этих папках прописываются с системных файлах.
Сейчас в проекте имеются следующие элементы.
	bg - МОДУЛЬНАЯ папка с картами, в ней хранятся все арены игры
		test-arena - пример папки с ареной
			Арена состоит из dat файла, в котором описаны слои этой арены и фильтры (слои, накладывающиеся сверху), также там описываются свойства карты, такие как гравитация, трение, ширина итд, задаются локальные источники освящения, координаты спавнов. К картам можно подключать файлы "эффектов", чтобы на каждой карте эффекты были собственные, иначе берется стандартный файл эффектов.
	chars - МОДУЛЬНАЯ папка с персонажами, там каждому чару выделено по папочке, где собраны все требуемые только им датки и спрайты
		test-char - пример персонажа
			sprites - папка содержит все спрайты персонажа
			ai.lua - набор инструкций поведения персонажа, если за него играет компьютер
			main.dat\\character.dat - файл описания перса
				датник персонажа имеет следующую структуру:
				- head - в этом теге задаются системные значения, например пути до спрайтов, имя, стартовое и максимальное здоровье, регенерация и прочее
				- frames_list - в этом теге задаются кадры "по умолчанию" (о них подробнее ниже)
				- dtypes_list - в этом теге задаются типы урона (о них подробнее ниже)
				- variables - локальные для каждого персонажа переменные, которые могут использоваться, допустим, в ai или стейтах
				- frame - основной блок описывающий один кадр (или фрейм) персонажа. данных блоков можно создавать бесконечное количество, каждый из них имеет следующую структуру
					- данные шапки - в основном они системные, если они не указаны, имеют по умолчанию 0. среди этих данных находятся, например, номер спрайта, смещение, следующий кадр, длительность этого кадра итд
					- блок стейта - таких блоков может быть несколько, тут задаются стейты и им передаются какие-то значения
					- блок тела - таких блоков может быть несколько, они отвечают за физическое тело персонажа, с которым будут происходить взаимодействия следующего блока
					- блок итерации - таких бло.. ну вы поняли.. отвечает за взаимодействия персонажей и объектов между собой. взаимодействие начинается когда блок итерации пересекается координатами с блоком тела. сценарий взаимодействия зависит от указанного типа "kind" (кинды находятся в папке ниже)
					- блок вызова - таких бла бла... отвечает за создание объектов
			head.png - аваратка персонажа (кажется в барах используется)
			face.png - аватарка персонажа (а эта в меню выбора, ну или наоборот)
	data - СИСТЕМНАЯ папка, содержит основные файлы с настройками движка
		- combinations.dat - системный файл с описаниями доступных комбинаций, комбинации описываются как [код клавиш]:[текстовый идентефикатор]. допустим если написать 314:hit_Da, то при использовании в коде персонажа hit_Da: xxx, персонаж перейдет в кадр xxx, если друг за другом были нажаты клавиши, имеющие коды 3,1,4.
		- damage_types.dat - системный файл, который описывает поведение персонажа при получении того или иного типа урона. к примеру при получении урона, который помечен как dtype: 1, персонаж перейдет в кадры, которые указаны в соответсвующем разделе данного файла. Если в файле нет какого-то типа урона, персонаж будет переходить в стандартные кадры, захардкоженные в движок. Также в каждом отдельном персонаже можно локально настроить поведение при тех или иных типах урона.
		- data.txt - системный файл в котором описываются пути до персонажей, объектов и карт. каждому персонажу\\объекту\\карте присваевается свой id, по которому в дальнейшем происходит обращение
		- english.lua - локализация, сделана в виде Lua таблички
		- frames.dat - системный файл для задачи фреймов "по умолчанию". такие фреймы используются при написании стейтов (об этом далее), это типа текстовых ссылок. К примеру, если указать тут death: 220, то при обращении к кадру "death", персонажа будет переносить в кадр 220 по умолчанию. В каждом отдельном персонаже можно локально задать тот или иной кадр.
		- russian.lua - тоже локализация (их стоит в отдельную папку засунуть)
		- settings.dat - системный файл с настройками игры (с ним ещё много мороки, поэтому без подробностей)
		- sparks.dat - это системный датник спарков. они сделаны отдельными объектами, для реализации разных фич. обращение к кадрам этого датника происходит из файла damage_types.dat
		- system.dat - тут задаются айдишники системных датников (сами пути прописаны в data.txt)
	DOCUMENTATION - в этой папке будет документация в html формате
	effects - МОДУЛЬНАЯ папка с датниками общих эффектов (взрывы там, брызги и так далее)
	kinds - СИСТЕМНАЯ папка, содержащая в себе сценарии взаимодействий
		test-kind.lua - каждый такой файл имеет одинаковую структуру по умолчанию, которая состоит из функций
			loadingBody - в этой функции задаётся считывание переменных, которые указываются в блоке тела в кадре персонажа и использутся в данном кинде далее
			loadingItr - тоже самое, но для блока итерации
			bodyCondition - дополнительные проверки, которые проходят при пересечении Itr'ом какого-либо Body (например проврека на то что был ударен враг, а не союзник)
			itrCondition - тоже самое, но только когда два Itr'а пересекаются (будет использовано, например, для столкновения ударов)
			bodyProcessing - непосредственно сценарий взаимодействия персонажей
			itrProcessing - сценарий столкновения персонажей
	libs - СИСТЕМНАЯ папка, содержащая в себе весь код движка
		battle - в папке лежат модули используемые непосредсвтенно в бою
			ai.lua - функции аи
			collision.lua - столкновения, взаимодействия
			control.lua - считывание нажатий, проверка нажатий, откаты нажатий итд
			entities.lua - куча функций, всё что касается персонажей, создание, удаление, просчитывание хп, смена кадра итд
			graphic.lua - отрисовка персонажей, их теней и отражений, а также поведение камеры
			physix.lua - "физика". перемещения, проверки на пересечение границ карты, гравитация, трение
			resourses.lua - загрузка системных ресурсов используемых в бою, по хорошему половину этих ресурсов надо вынести в system.dat и грузить оттуда
		battle.lua - описание всего боя, общий процесс, что происходит в начале боя, смена карты и так далее
		data.lua - подгрузка всего из папки data, а также из системных папок стейтов и итераций
		fonts.lua - файл со шрифтами (временная реализация) и скриптом отрисовки текста
		functions.lua - рандомные функции, которые сунуть некуда
		gamera.lua - библиотека камеры
		images.lua - функции загрузки и отрисовки спрайтов
		localization.lua - не помню, что тут находится xD ну что-то про локализацию
		resourses.lua - загрузка в память файлов персонажей и карт
		rooms.lua - основа для комнат (далее подробнее)
		settings.lua - загрузка настроек в память, функция по смене разрешения и сохранение настроек
		sounds.lua - функции загрузки и воспроизведения звуков
	music - МОДУЛЬНАЯ папка с музыкой
	objects - МОДУЛЬНАЯ папка с dat файлами объектов. структура объектов такая-же как и у персонажей, только type в шапке другой
	rooms - СИСТЕМНАЯ папка с файлами комнат. все комнаты задаются непосредственно в движке (файл libs/rooms.lua) а тут хранятся наборы поведения, ресурсов и прочего для тех или иных комнат. все комнаты имеют обязательные функции load, update и draw, а также свои локальные функции. в зависимости от того, какая сейчас комната, выполняется тот или иной набор данных функций
	sounds - МОДУЛЬНАЯ папка со звуками
	sprites - МОДУЛЬНАЯ папка со спрайтами (однако пока там находится СИСТЕМНАЯ папка с интерфейсами, но это скоро будет доработано)
		UI - папка содержащая все элементы интерфейса
		filter.png - фильтр "освящения"
	states - СИСТЕМНАЯ папка с описаниями сценариев стейтов. каждый персонаж может единовреемнно иметь несколько стейтов в своём кадре. для каждого из указанных стейтов выполняется функция Processing. Также в шапке персонажа можно подключить "пассивные" стейты, у которых каждый тик будет выполняться функция Update. Стейт может быть и пассивным и активным одновременно. Например стейт блока, который повышает защиту персонажа, когда активен и имеет функцию снятия добавленной защиты и пассивный таймер, чтобы блоком не спамили.

